1. Nodejs Process object
(1) http://wuxy720.iteye.com/blog/2403909
process对象其实就是代表着Node.js的应用程序，也是一个全局对象。再次不在赘述，今天我们主要来看看process对象的两个比较特别的属性stdin与stdout。
(2)https://www.cnblogs.com/vajoy/p/4783390.html
一个指向 标准输入流(stdin) 的可读流(Readable Stream)。标准输入流默认是暂停 (pause) 的，所以必须要调用 
process.stdin.resume() 来恢复 (resume) 接收


2. Nodejs Datatype

var length = 16;                               // Number
var lastName = "Johnson";                      // String
var x = {firstName:"John", lastName:"Doe"};    // Object

3. var vs let

The difference is scoping. var is scoped to the nearest function block and let is scoped to the nearest enclosing block, 
which can be smaller than a function block. Both are global if outside any block.

使用var声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象；
使用let声明的变量，其作用域为该语句所在的代码块内，不存在变量提升；
使用const声明的是常量，在后面出现的代码中不能再修改该常量的值。

https://stackoverflow.com/questions/762011/whats-the-difference-between-using-let-and-var-to-declare-a-variable-in-jav

4. Method reference:
https://www.w3schools.com/js/js_string_methods.asp
http://www.w3school.com.cn/js/js_errors.asp


5. Strict Mode:

1) Strict mode makes it easier to write "secure" JavaScript.
2) Strict mode changes previously accepted "bad syntax" into real errors.
3) As an example, in normal JavaScript, mistyping a variable name creates a new global variable. 
In strict mode, this will throw an error, making it impossible to accidentally create a global variable.
4) In normal JavaScript, a developer will not receive any error feedback assigning values to non-writable properties.
In strict mode, any assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object, will throw an error.

https://www.w3schools.com/js/js_strict.asp

6. throw, catch and finally

https://www.w3schools.com/js/js_errors.asp
https://www.jianshu.com/p/945502a43eaa (throw to parent)

e.g

function isPositive(a) {
        if(Number(a) > 0){
            return "YES";
        } else if(Number(a) == 0) {
            throw new Error("Zero Error");     
        } else {
            throw new Error("Negative Error");
        }
    
}

function main() {
    const n = +(readLine());
    
    for (let i = 0; i < n; i++) {
        const a = +(readLine());
      
        try {
            console.log(isPositive(a));
        } catch (e) {
            console.log(e.message);
        }
    }
}

7. class declaration

//类的声明
var Animal = function () {
    this.name = 'Animal';
};

//ES6中类的声明
class Animal2 {
    constructor () {
        this.name = 'Animal2';
    }
}    


8. [ECMAScript] Tagged template literals:

https://www.jianshu.com/p/0c5091e137c0

tip:
https://www.w3schools.com/js/js_arrays.asp




